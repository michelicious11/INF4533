// Generated by CoffeeScript 2.3.1
(function() {
  var created_db, erase, find_file, fs, ld, stop, writeFile;

  fs = require('fs');

  ld = require('lodash');

  created_db = {};

  module.exports = function({value, file, saveEverySecs, forceNew} = {}) {
    var error, interval;
    if (value == null) {
      value = {};
    }
    if (file == null) {
      file = "json_file_object.json";
    }
    if (saveEverySecs == null) {
      saveEverySecs = 5;
    }
    if (forceNew == null) {
      forceNew = false;
    }
    if (!created_db[file]) {
      if (!forceNew) {
        try {
          value = JSON.parse(fs.readFileSync(file, 'utf8'));
        } catch (error1) {
          error = error1;
          console.warn(error);
        }
      }
      interval = setInterval(function() {
        return writeFile(file, value);
      }, saveEverySecs * 1000);
      created_db[file] = {
        obj: value,
        interval
      };
    }
    return created_db[file].obj;
  };

  writeFile = function(file, obj) {
    return fs.writeFile(file, JSON.stringify(obj, null, 2), function(err) {
      if (err) {
        return console.log(err);
      }
    });
  };

  module.exports.stop = function(obj) {
    var file;
    file = find_file(obj);
    if (file) {
      writeFile(file, created_db[file].obj);
      return stop(file);
    }
  };

  module.exports.stopAll = function() {
    var file, results;
    results = [];
    for (file in created_db) {
      writeFile(file, created_db[file].obj);
      results.push(stop(file));
    }
    return results;
  };

  module.exports.erase = function(obj) {
    var file;
    file = find_file(obj);
    if (file) {
      return erase(file);
    }
  };

  module.exports.eraseAll = function() {
    var file, results;
    results = [];
    for (file in created_db) {
      results.push(erase(file));
    }
    return results;
  };

  stop = function(file) {
    var interval;
    ({interval} = created_db[file]);
    clearInterval(interval);
    return delete created_db[file];
  };

  erase = function(file) {
    stop(file);
    return fs.unlink(file);
  };

  find_file = function(obj) {
    var file, val;
    for (file in created_db) {
      val = created_db[file];
      if (obj === val.obj) {
        return file;
      }
    }
    return void 0;
  };

}).call(this);
